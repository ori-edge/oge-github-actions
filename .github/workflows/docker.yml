name: Docker build and push

on:
  workflow_call:
    inputs:
      chartPath:
        description: "helm Chart.yaml path e.g. charts/yourapp/Chart.yaml (used to generate imageVersion variable in chart_version mode)"
        required: false
        type: string
      dockerRegistry:
        description: "name of the docker registry"
        required: false
        default: "quay.io"
        type: string
      dockerRepo:
        description: "name of the docker repository"
        required: false
        default: "oriedge"
        type: string
      dockerImage:
        description: "name of the docker image (over-rides generated image names)"
        required: false
        default: ""
        type: string
      dockerImageMode:
        description: "mode from which the docker image should be created from (custom, chart_version, branch_ref)"
        required: false
        default: "chart_version"
        type: string
      imageName:
        description: "name of the docker image to be built"
        required: true
        type: string
      buildContext:
        description: "docker build context"
        default: "."
        required: false
        type: string
      platforms:
        description: "the list of platforms/architectures to created images for"
        default: "linux/amd64,linux/arm64"
        required: false
        type: string
      push:
        description: ""
        default: true
        required: false
        type: boolean
    secrets:
      REGISTRY_USERNAME:
        description: "docker registry username"
        required: false
      REGISTRY_PASSWORD:
        description: "docker registry password"
        required: false

jobs:
  docker:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2
        with:
          fetch-depth: 0

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v1

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1

      - name: Login to quay.io Container Registry
        uses: docker/login-action@v1
        with:
          registry: ${{ inputs.dockerRegistry }}
          username: ${{ secrets.REGISTRY_USERNAME }}
          password: ${{ secrets.REGISTRY_PASSWORD }}

      - name: Build docker image version
        shell: bash
        run: |
          echo "[debug] dockerImage: ${{ inputs.dockerImage }}"
          echo "[debug] dockerImageMode: ${{ inputs.dockerImageMode }}"
          echo "[debug] chartPath: ${{ inputs.chartPath }}"
          if [ -z "${{ inputs.dockerImage }}" ]
          then
            export IMAGE_VERSION="${{ inputs.dockerImage }}"
          else if [ "${{ inputs.dockerImageMode }}" = "chart_version" ] && [ ! -z "${{ inputs.chartPath }}" ]
          then
            export IMAGE_VERSION=$(grep '^version:' ${{ inputs.chartPath }} | cut -d ":" -f2 | tr -d ' ')
          else if [ "${{ inputs.dockerImageMode }}" =  "branch_ref" ]
          then
            export IMAGE_VERSION=$(echo ${GITHUB_REF#refs/heads/} | sed 's/\//_/g')
          else
            echo "Invalid IMAGE_VERSION configuration"
            exit 1
          fi
          echo "[debug] IMAGE_VERSION=${{ IMAGE_VERSION }}"
          if [ -z "${{ IMAGE_VERSION }}" ]
          then
            echo "[error] image version is empty"
            exit 1
          fi
          echo "IMAGE_VERSION=${{ IMAGE_VERSION }}" >> $GITHUB_ENV

      - name: Build and push image
        uses: docker/build-push-action@v2
        with:
          context: ${{ inputs.buildContext }}
          build-args: version=${{ env.CHART_VERSION }}
          platforms: ${{ inputs.platforms }}
          push: ${{ inputs.push }}
          tags: ${{ inputs.dockerRegistry }}/${{ inputs.dockerRepo }}/${{ inputs.imageName }}:${{ env.IMAGE_VERSION }}
