name: Docker build and push

on:
  workflow_call:
    inputs:
      dockerImageMode:
        description: "mode from which the docker image should be created from (branch_ref, chart_ref, custom)"
        required: false
        default: "chart_ref"
        type: string
      chartPath:
        description: "helm Chart.yaml path e.g. charts/yourapp/Chart.yaml (used by dockerImageMode 'chart_ref')"
        required: false
        type: string
      dockerRegistry:
        description: "name of the docker registry"
        required: false
        default: "quay.io"
        type: string
      dockerRepo:
        description: "name of the docker repository"
        required: false
        default: "oriedge"
        type: string
      imageName:
        description: "name of the docker image to be built ({repo}/{name}:{version})"
        required: true
        type: string
      imageVersion:
        description: "version of the docker image to be built ({repo}/{name}:{version}) (Overrides image mode)"
        required: false
        default: ""
        type: string
      buildContext:
        description: "docker build context"
        default: "."
        required: false
        type: string
      buildArgs:
        description: "docker build args (see --build-arg in docker docs)"
        default: ""
        required: false
        type: string
      platforms:
        description: "the list of platforms/architectures to create docker images for"
        default: "linux/amd64,linux/arm64"
        required: false
        type: string
      push:
        description: "the flag indicating if the image should be pushed to the registry or not"
        default: true
        required: false
        type: boolean
    secrets:
      REGISTRY_USERNAME:
        description: "docker registry username"
        required: false
      REGISTRY_PASSWORD:
        description: "docker registry password"
        required: false

jobs:
  docker:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v2

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Login to quay.io Container Registry
        uses: docker/login-action@v2
        with:
          registry: ${{ inputs.dockerRegistry }}
          username: ${{ secrets.REGISTRY_USERNAME }}
          password: ${{ secrets.REGISTRY_PASSWORD }}

      - name: Generate image version (CHART_REF)
        if: ${{ inputs.dockerImageMode == 'chart_ref' }}
        run: |
          if [[ -z "${{ inputs.chartPath }}" ]]; then
            echo "inputs.chartPath must be set in dockerImageMode 'chart_ref'"
            exit 1
          fi
          IMAGE_VERSION=$(grep '^version:' ${{ inputs.chartPath }} | cut -d ":" -f2 | tr -d ' ')
          echo "CHART_PATH=${{ inputs.chartPath }}"
          echo "IMAGE_VERSION=${IMAGE_VERSION}"
          echo "IMAGE_VERSION=${IMAGE_VERSION}" >> $GITHUB_ENV

      - name: Generate image version (BRANCH_REF)
        if: ${{ inputs.dockerImageMode == 'branch_ref' }}
        run: |
          IMAGE_VERSION=$(echo ${GITHUB_REF#refs/heads/} | sed 's/\//_/g')
          echo "IMAGE_VERSION=${IMAGE_VERSION}"
          echo "IMAGE_VERSION=${IMAGE_VERSION}" >> $GITHUB_ENV

      - name: Generate image version (CUSTOM)
        if: ${{ inputs.imageVersion != '' }}
        run: |
          IMAGE_VERSION="${{ inputs.imageVersion }}"
          echo "IMAGE_VERSION=${IMAGE_VERSION}"
          echo "IMAGE_VERSION=${IMAGE_VERSION}" >> $GITHUB_ENV

      - name: Validate image version
        if: ${{ env.IMAGE_VERSION == '' }}
        run: |
          echo "ERROR: env.IMAGE_VERSION is empty"
          exit 1

      - name: Generate build args
        run: |
          BUILD_ARGS=$(echo "${{ inputs.buildArgs }}" | sed "s/version=version/version=${{ env.IMAGE_VERSION }}/g")
          echo "BUILD_ARGS=${BUILD_ARGS}"
          echo "BUILD_ARGS=${BUILD_ARGS}" >> $GITHUB_ENV

      - name: Build and push image
        uses: docker/build-push-action@v3
        with:
          context: ${{ inputs.buildContext }}
          build-args: ${{ env.BUILD_ARGS }}
          platforms: ${{ inputs.platforms }}
          push: ${{ inputs.push }}
          tags: ${{ inputs.dockerRegistry }}/${{ inputs.dockerRepo }}/${{ inputs.imageName }}:${{ env.IMAGE_VERSION }}
